@using CbarRatesApp.Components;
@using System.Net.Http
@using System.Net.Http.Json
@using CbarRatesApp.Models;
@using FxCore.Models;

@inject HttpClient client


<div>
    <div class="card mt-4">
        <div class="card-header">
            @if (rateInfo != null)
            {
                <div class="row">
                <div class="col">
                    <p class="h5">@DateTime.Now.ToShortDateString()</p>
                    <p class="h5">AZN 1 = @CurrencyCode @rateInfo.Rate	@rateInfo.Difference (@rateInfo.DifferencePercent) </p>
                </div>
                <div class="col">
                    <div>
                        Change from 1 February 1999 to 9 March 2023
                    </div>
                    <div class="row">
                        <div class="col">
                            <div>Min (28 September 2022)</div>
                            <div>@rateInfo.MinRate</div>
                        </div>
                        <div class="col">
                            <div>Max (30 March 2022)</div>
                            <div>@rateInfo.MaxRate</div>
                        </div>
                        <div class="col">
                            <div>Average</div>
                            <div>@rateInfo.AverageRate</div>
                        </div>
                    </div>
                </div>
            </div>
            }
            
        </div>
        <div class="card-body" style="min-height:400px ">
            @if (showChart)
            {
                <ZgLineChart Id="MyLineChart" Config="config" />
            }
            else
            {
                <ZgLoaderCascade />
            }
        </div>
    </div>

    <div class="card mt-4">
        <div class="card-body">
            @if (showChart)
            {
                <ZgCurrencyRatesList CurrencyCode="@CurrencyCode" Data="fxList" />




            }
            else
            {
                <ZgLoaderCascade />
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string CurrencyCode { get; set; }

    List<DailyFx> fxList;
    ChartConfig config;
    bool showChart;
    RateInfo rateInfo;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(CurrencyCode))
        {
            CurrencyCode = "EUR";
        }

        fxList = await client.GetFromJsonAsync<List<DailyFx>>("api/get/range/01-01-2023/31-03-2023");

        rateInfo = GetRateInfo(fxList, CurrencyCode, DateTime.Now);

        LoadChart();
    }

    protected override void OnParametersSet()
    {
        LoadChart();
    }

    private void LoadChart()
    {
        var data = new DataItem[fxList.Count];
        for (int i = 0; i < fxList.Count; i++)
        {
            data[i] = new DataItem()
                {
                    y = fxList[i].Rates.Where(x => x.Code == CurrencyCode).First().Value.ToString(),
                    x = fxList[i].Date.ToString("d")
                };
        }

        var dataset = new Dataset()
            {
                Label = CurrencyCode,
                Data = data
            };

        config = new ChartConfig()
            {
                Type = ChartType.line.ToString(),
                Data = new Data() { Datasets = new Dataset[1] },
                Options = new Options() { Responsive = true }
            };

        config.Data.Datasets[0] = dataset;

        showChart = true;
    }

    private RateInfo GetRateInfo(List<DailyFx> dailyFxlist, string currencyCode, DateTime date)
    {
        var info = new RateInfo();
        var rateList = new List<decimal>();

        info.Rate = dailyFxlist.Where(x => x.Date.Date == date.Date).First().Rates
                          .Where(x => x.Code == currencyCode).First().Value;

        var prevRate = dailyFxlist.Where(x => x.Date.Date == date.AddDays(-1).Date).First().Rates
                          .Where(x => x.Code == currencyCode).First().Value;

        info.Difference = info.Rate - prevRate;
        info.DifferencePercent = Math.Round((info.Difference / prevRate) * 100, 4);

        info.MinRate = dailyFxlist.Min(x => x.Rates.Where(x => x.Code == currencyCode).First().Value);
        info.MaxRate = dailyFxlist.Max(x => x.Rates.Where(x => x.Code == currencyCode).First().Value);
        info.AverageRate = Math.Round(dailyFxlist.Average(x => x.Rates.Where(x => x.Code == currencyCode).First().Value),4);

        return info;
    }

    private class RateInfo
    {
        public decimal Rate { get; set; }
        public decimal Difference { get; set; }
        public decimal DifferencePercent { get; set; }
        public decimal MinRate { get; set; }
        public decimal MaxRate { get; set; }
        public decimal AverageRate { get; set; }
    }

}