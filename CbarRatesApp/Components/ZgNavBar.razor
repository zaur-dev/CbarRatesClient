@implements IDisposable
@inject NavigationManager NavigationManager

<nav class="navbar bg-body-tertiary sticky-top">
    <div class="zg-navbar-container">
        <div class="zg-navbar-brand">
            <a href="/"><i class="bi bi-currency-exchange"></i> AZN FX rates</a>
            <div class="zg-navbar-menu-toggler" @onclick="ToggleMenu">
                <span class="oi oi-menu" aria-hidden="true"></span>
            </div>
        </div>
        <div class="zg-navbar-menu @display">
            <ul class="zg-nav">
                @if (Links != null)
                {
                    foreach (var item in Links)
                    {
                        <li class="zg-nav-item">
                            <NavLink Match="NavLinkMatch.All" ActiveClass="zg-active" href=" @item.Value">@item.Key</NavLink>
                        </li>
                    }
                }
            </ul>
        </div>
        <div class="zg-navbar-end @display">
            <ZgThemeToggler />
            @*<div class="vr"></div>
            <ul class="zg-nav">
                <li class="zg-nav-item">
                    <NavLink Match="NavLinkMatch.All" href="login">Login</NavLink>
                </li>
            </ul>*@
        </div>
    </div>
</nav>

@code {
    bool show = true;
    string display = "";

    [Parameter]
    public Dictionary<string, string>? Links { get; set; }

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationHasChanged;
    }

    private void LocationHasChanged(object sender, LocationChangedEventArgs e)
    {
        show = true;
        display = "zg-hide";
        StateHasChanged();
    }

    private void ToggleMenu()
    {
        display = show ? "zg-show" : "zg-hide";
        show = !show;
    }

    void IDisposable.Dispose()
    {
        // Unsubscribe from the event when our component is disposed
        NavigationManager.LocationChanged -= LocationHasChanged;
    }
}
